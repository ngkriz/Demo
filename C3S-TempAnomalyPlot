



from datetime import date, datetime
import cdstoolbox as ct

NOW_YEAR = datetime.now().year
YEARS = list(range(1990, NOW_YEAR))

MONTHS = {
    f'{month:02}': date(2019, month, 1).strftime('%B')
    for month in range(1, 13)
}

PLOTLY_HEIGHT = 400
LAYOUT_KWARGS = {
    'title_x': 0.2,
    'height': PLOTLY_HEIGHT,
    'margin': {'t': 50},
    'legend': {
        'x': 1.2, 'xanchor': 'left',
        'y': 1.3, 'yanchor': 'top',
        'orientation': 'v',
    },
}
LINE_COLOURS = [
    '#e41a1c',
    '#377eb8',
    '#4daf4a',
    '#984ea3',
    '#ff7f00',
    '#ffff33',
    '#a65628',
    '#f781bf',
    '#999999',
]

RANGESLIDER = {
    'visible': True,
    'thickness': 0.05,
    'bordercolor': '#000000',
    'borderwidth': 1,
    'yaxis': {
        'range': [-10000, -10001], },
}

CLIM_RANGES = {
    f'{start_year} to {start_year+19}': (start_year, start_year+19)
    for start_year in range(NOW_YEAR-20, 1990, -1)
}

CLIM_RANGES = {
    'Custom': (0, 0),
    **CLIM_RANGES
}

DEFAULT_CLIM_RANGE = f'{NOW_YEAR-20} to {NOW_YEAR-1}'

###########################################################################
#  CHILD APP
CHILD_DESCRIPTION = """
Each line on the time-series corresponds to a selected location or city.
"""
child_layout = ct.Layout(rows=5)
child_layout.add_widget(row=0, markdown=CHILD_DESCRIPTION, md=12)
# child_layout.add_widget(row=1, content='extra_point', md=12)
child_layout.add_widget(row=2, content='output-0', md=12)
child_layout.add_widget(row=3, content='output-1', md=12)
# child_layout.add_widget(row=4, content='output-2', md=12)


@ct.child(position='right', layout=child_layout)
@ct.output.markdown()
@ct.output.livefigure()
# @ct.output.livefigure()
def child(
    location,
    sm_clim_all, sm_anom_all, 
):
    #     print(location)
    lats_lons_labels = [
        (
            loc['lat'], loc['lon'],
            loc.get('value', f"{loc['lat']:0.2f}°N, {loc['lon']:0.2f}°E")
        )
        for loc in location
    ]

    markdown = f"""
## Temperature mean and anomaly.
"""
    fig_clim, fig_anom = None, None
    
    n_valid = 0
    for lat, lon, label in lats_lons_labels:
        # Check that clicked point is over land:
        land = ct.shapes.catalogue.land()
        if not ct.shapes.intersects(land, (lat, lon)):
            continue

        n_valid += 1
        # If running independantly:
        fig_clim, fig_anom = extract_and_plot(
            sm_clim_all, sm_anom_all, 
            lat, lon, label, n_valid,
            fig_clim, fig_anom,
        )
    if n_valid > 0:
        return markdown, ct.chart.subplots(
            fig_clim, fig_anom, rows=2, cols=1
        )
    return (
        '## Selected point(s) are not over land, please try again',
        ct.output.NULL_RESULT, ct.output.NULL_RESULT
    )


def extract_and_plot(
    sm_clim_all, sm_anom_all,
    lat, lon, label, n_valid,
    fig_clim=None, fig_anom=None
):
    sm_clim = ct.geo.extract_point(
        sm_clim_all, lon=float(lon), lat=float(lat)
    )

    sm_anom = ct.geo.extract_point(
        sm_anom_all, lon=float(lon), lat=float(lat)
    )

    fig_clim = ct.chart.line(
        sm_clim,
        fig=fig_clim,
        layout_kwargs={
            'title': 'Soil moisture climatology',
            'yaxis': {
                'title': {
                    'text': f"Climatological Mean ['°C']",
                },
            },
            'xaxis': {
                'ticktext': [MONTHS[mnth] for mnth in MONTHS],
                'tickvals': list(range(1, 13)),
                'tickmode': 'array',
                'title': ''
            },
            **LAYOUT_KWARGS
        },
        scatter_kwargs={
            'name': f"{label}",
            'hovertemplate': ('%{y:.2f} '+'°C'+"<extra></extra>"),
            'legendgroup': label,
            'line': {'color': LINE_COLOURS[n_valid-1]},
            'mode': 'lines'
        }
    )

    fig_anom = ct.chart.line(
        sm_anom,
        fig=fig_anom,
        layout_kwargs={
            'title': 'Soil moisture anomaly',
            'xaxis': {
                'range': ['2010-01-01', '2019-12-31'],
                'title': 'Date',
                'rangeslider': RANGESLIDER,
            },
            'yaxis': {
                'title': {
                    'text': f"Anomaly ['°C']",
                },
            },
            **LAYOUT_KWARGS
        },
        scatter_kwargs={
            'name': f"{label}",
            'hovertemplate': ('%{y:.3f} '+'°C'+"<extra></extra>"),
            'legendgroup': label, 'showlegend': False,
            'line': {'color': LINE_COLOURS[n_valid-1]},
            'mode': 'lines'
        }
    )

#     subplots = ct.chart.subplots(
#             fig_clim, fig_anom, rows=2, cols=1, fig=subplots
#         )

    return fig_clim, fig_anom


###########################################################################
# MAIN APPLICATION
left_layout = ct.Layout(rows=4)
left_layout.add_widget(row=0, content='clim_range_name')
left_layout.add_widget(row=1, content='clim_range_custom')
left_layout.add_widget(row=2, content='output-0')
left_layout.add_widget(row=3, content='output-1', height=500)

main_layout = ct.Layout(rows=1)
main_layout.add_widget(row=0, content=left_layout, md=6)
main_layout.add_widget(
    row=0, content='[child]',
    height=850, md=6, v_align='flex-end'
)


@ct.application(title='', layout=main_layout)

@ct.input.dropdown(
    'clim_range_name',
    label='Climatology baseline (Temp):',
    values=CLIM_RANGES,
    link={'Custom': ['custom_tr']},
    default=DEFAULT_CLIM_RANGE,
)
@ct.input.slider(
    'clim_range_custom', min=1992, max=2019, step=1,
    default=(1992, 2010), label='Custom climatology baseline:',
    when='custom_tr'
)
@ct.output.markdown()
@ct.output.livemap(click_on_map=child, geocode_city=child)  # , height='50')
def satellite_sm_anomaly(
    clim_range_name,
    clim_range_custom=None
):
    """
    Application main steps:


    - Extract monthly time series at all selected locations
    - Compute anomalies using the selected climatological baseline.
    - Visualise all time series in an interactive chart.
    """

    if clim_range_name == 'Custom':
        clim_range = clim_range_custom
    else:
        clim_range = CLIM_RANGES[clim_range_name]

    text = f'''
White areas over land are areas with no available data.

Please click a location on the map to view the anomaly time-series and
climatology for that point. Multiple selections can be made to compare
time-series for different locations.
'''
    
    
    
    


    
    
    
    
    
    sm_data = ct.catalogue.retrieve(
        'reanalysis-era5-single-levels-monthly-means',
        {
            'product_type': 'monthly_averaged_reanalysis',
            'variable': '2m_temperature',
            'year': YEARS,
            'month': [
                '01', '02', '03', '04', '05', '06', '07',
                '08', '09', '10', '11', '12'],
            'time': '00:00',
            'grid':['3', '3']
        }
    )
    sm_data = ct.cdm.convert_units(sm_data, '°C')


    
    
    


    sm_clim = ct.climate.climatology_mean(
        sm_data, start=str(clim_range[0]), stop=str(clim_range[1])
    )

    sm_anom = ct.climate.anomaly(sm_data, sm_clim)
    layers = [
        {
            'data': ct.cdm.update_attributes(
                ct.cube.select(sm_clim, month=int(mnth)),
 
            ),
            'type': 'radio',
            'label': MONTHS[mnth]
        } for mnth in MONTHS
    ]

    click_kwargs = {
        'sm_clim_all': sm_clim,
        'sm_anom_all': sm_anom,

    }
    cb_layers = dict(
        countries=ct.shapes.catalogue.countries(),
        cities=ct.shapes.get('basic', 'cities__resolution_high')
    )
    cb_layers = [{
        'data': cb_layers[layer],
        'label': layer.title(),
        'type': 'checkbox',
    } for layer in cb_layers
    ]

    livemap = ct.livemap.plot(
        layers+cb_layers,
        click_kwargs=click_kwargs,
        lat=10, lon=60, zoom=1,
        click_multi_select=True,
        show_legend=True,
        grid={'dx': 1e-2, 'dy': 1e-2},
    )

    for i, layer in enumerate(livemap['layers']):
        if layer.get('name') == 'Cities':
            livemap['layers'][i]['wms_configuration']['pane'] = 'shadowPane'

    return text, livemap
